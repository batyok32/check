"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import sys
import dj_database_url
from os import getenv, path
from pathlib import Path
import dotenv
from django.core.management.utils import get_random_secret_key
from datetime import timedelta
from celery.schedules import crontab

BASE_DIR = Path(__file__).resolve().parent.parent

dotenv_file = BASE_DIR / ".env.local"
#dotenv_file = BASE_DIR / ".env.prod"

if path.isfile(dotenv_file):
    dotenv.load_dotenv(dotenv_file)


SECRET_KEY = 'django-insecure-zw*5j6mmbje0yx_bod8#80!0q4^v*dnsavg(6dsv9tveck4f3^'
# SECRET_KEY = getenv('DJANGO_SECRET_KEY', get_random_secret_key())
DEBUG = getenv('DEBUG', 'False') == 'True'
DEVELOPMENT_MODE = getenv('DEVELOPMENT_MODE', 'False') == 'True'


ALLOWED_HOSTS = ['*']
# ALLOWED_HOSTS = getenv('DJANGO_ALLOWED_HOSTS', '127.0.0.1,localhost').split(',')


INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "djoser",
    'storages',
    'corsheaders',
    'social_django',
    "users",
    'products',
    "django_filters",
    'sorl.thumbnail',
    'order',
    'administration',
    'recommendation',
    # 'django_elasticsearch_dsl',
    # 'django_elasticsearch_dsl_drf',
    'django_ckeditor_5',
    'drf_spectacular'
    # "django_celery_beat",

]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    'django.middleware.locale.LocaleMiddleware', # here
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [path.join(BASE_DIR, "templates"), path.join(BASE_DIR, 'templates/admin')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
if DEVELOPMENT_MODE is True:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
elif len(sys.argv) > 0 and sys.argv[1] != "collectstatic":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql_psycopg2",
            "NAME": "yuuselldb",
            "USER": "yuuselluser",
            "PASSWORD": "R+0xxRA8&Xj4Xu*&",
            "HOST": "127.0.0.1",
            "PORT": "5432",
        }
    }
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
  

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

# LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


USE_S3 = getenv('USE_S3', "False") == "True"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# if DEVELOPMENT_MODE is True:

if USE_S3:
    AWS_ACCESS_KEY_ID = getenv('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = getenv('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = getenv('AWS_STORAGE_BUCKET_NAME')
    AWS_DEFAULT_ACL = 'public-read'
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
    
    # s3 static settings
    STATIC_LOCATION = 'static'
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{STATIC_LOCATION}/'
    STATICFILES_STORAGE = 'config.storage_backends.StaticStorage'
    
    # s3 public media settings
    PUBLIC_MEDIA_LOCATION = 'media'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{PUBLIC_MEDIA_LOCATION}/'
    DEFAULT_FILE_STORAGE = 'config.storage_backends.PublicMediaStorage'
    STATICFILES_DIRS = (path.join(BASE_DIR, 'static'),)

else:
    STATIC_URL = "static/"
    STATIC_ROOT = BASE_DIR / "static"

    MEDIA_URL = "media/"
    MEDIA_ROOT = BASE_DIR / "media"
    # STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'



REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "users.authentication.CustomJWTAuthentication",
    ],
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
    ],
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.AllowAny"],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",

    'FORM_METHOD_OVERRIDE': None,
    'FORM_CONTENT_OVERRIDE': None,

    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema', 

}

    # 'DEFAULT_PARSER_CLASSES': [
    #     'rest_framework.parsers.MultiPartParser',  # Ensure this is included
    #     'rest_framework.parsers.JSONParser',
    #     'rest_framework.parsers.FormParser',
    # ],
    # 'UNICODE_JSON': False

AUTH_COOKIE = 'access'
AUTH_COOKIE_ACCESS_MAX_AGE =60*5
AUTH_COOKIE_REFRESH_MAX_AGE =60*60*24
AUTH_COOKIE_SECURE = getenv("AUTH_COOKIE_SECURE", "True")
AUTH_COOKIE_HTTP_ONLY = True
AUTH_COOKIE_PATH = "/"
AUTH_COOKIE_SAMESITE = "Lax"

DJOSER = {
    "PASSWORD_RESET_CONFIRM_URL": "auth/reset-password/{uid}/{token}",
    "SEND_ACTIVATION_EMAIL": True,
    "ACTIVATION_URL": "auth/activation/{uid}/{token}",
    "USER_CREATE_PASSWORD_RETYPE": True,
    "PASSWORD_RESET_CONFIRM_RETYPE": True,
    "TOKEN_MODEL": None,
    "SOCIAL_AUTH_ALLOWED_REDIRECT_URLS":getenv("REDIRECT_URLS").split(','),
    "SERIALIZERS": {
        "current_user": "users.serializers.UserDetailSerializer",
    },
}

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = getenv("GOOGLE_AUTH_KEY")
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = getenv("GOOGLE_AUTH_SECRET_KEY")
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    'https://www.googleapis.com/auth/userinfo.email', 
    'https://www.googleapis.com/auth/userinfo.profile', 
    'openid', 
]
SOCIAL_AUTH_GOOGLE_OAUTH2_EXTRA_DATA = ['first_name', 'last_name']

SOCIAL_AUTH_FACEBOOK_KEY = getenv("FACEBOOK_AUTH_KEY")
SOCIAL_AUTH_FACEBOOK_SECRET = getenv("FACEBOOK_AUTH_SECRET_KEY")
SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']
SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {'fields':'email, first_name, last_name'}


DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "users.UserAccount"

AUTHENTICATION_BACKENDS = [
    'social_core.backends.google.GoogleOAuth2',
    'social_core.backends.facebook.FacebookOAuth2',
    'django.contrib.auth.backends.ModelBackend',
]
# EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = getenv("EMAIL_HOST_PASSWORD")

CORS_ALLOWED_ORIGINS = getenv(
    "CORS_ALLOWED_ORIGINS", 
    "http://localhost:3000,http://127.0.0.1:3000"
).split(",")
CORS_ALLOW_CREDENTIALS = True 

CORS_ORIGIN_WHITELIST = getenv(
    "CORS_ALLOWED_ORIGINS", 
    "http://localhost:3000,http://127.0.0.1:3000"
).split(",")


DOMAIN = getenv("DOMAIN")
SITE_NAME = "YuuSell"
SITE_DOMAIN = getenv("SITE_DOMAIN")


TWILIO_ACCOUNT_SID = getenv("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = getenv("TWILIO_AUTH_TOKEN")
TWILIO_PHONE_NUMBER = getenv("TWILIO_PHONE_NUMBER")
TWILIO_VERIFIED_SID = getenv("TWILIO_VERIFIED_SID")


# settings.py

# Celery Configuration
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
# CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
if DEVELOPMENT_MODE is True:
    CELERY_BEAT_SCHEDULE = {
        "tracking_shipped_packages": {
            "task": "order.tasks.tracking_shipped_packages",
            "schedule": crontab(),
        },
        "track_delivered_packages_and_unhold_money": {
            "task": "order.tasks.track_delivered_packages_and_unhold_money",
            "schedule": crontab(),
        },
    
    }
else:
    CELERY_BEAT_SCHEDULE = {
        "tracking_shipped_packages": {
            "task": "order.tasks.tracking_shipped_packages",
            "schedule": crontab(minute=0, hour="*/6"),
        },
        "track_delivered_packages_and_unhold_money": {
            "task": "order.tasks.track_delivered_packages_and_unhold_money",
            "schedule": crontab(minute=0, hour="*/12"),
        },
    }

REDIS_PORT = 6379
REDIS_HOST = "localhost"
REDIS_DB = 0
REDIS_CONNECT_RETRY = True


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=24),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=14),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUTH_HEADER_TYPES": ("JWT",),
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
}

DEFAULT_FROM_EMAIL = "yuusell.wa@gmail.com"


# ELASTICSEARCH_DSL = {
#     "default": {
#         "hosts": "https://localhost:9200",
#         "http_auth": ("elastic", "aAoOerqax*0fmlU*g5u3"),
#         "ca_certs": BASE_DIR / "http_ca.crt",  # Path to your CA certificate, if needed
#     }
# }

SQUARE_ACCESS_TOKEN=getenv("SQUARE_ACCESS_TOKEN")
SQUARE_ENVIRONMENT=getenv("SQUARE_ENVIRONMENT")
# Meet_C2XvpjA=eiuZlrj
# ELASTICSEARCH_INDEX_NAMES = {
#     'search_indexes.documents.book': 'book',
#     'search_indexes.documents.publisher': 'publisher',
# }

# curl -X GET -u elastic:aAoOerqax*0fmlU*g5u3 "https://localhost:9200/products/_search?pretty" --insecure -H 'Content-Type: application/json' -d'
# {
#   "query": {
#     "match": {
#       "category_name": {
#         "query": "shoes",
#         "minimum_should_match": "75%"
#       }
#     }
#   }
# }
# '

# curl -X GET -u elastic:aAoOerqax*0fmlU*g5u3 "https://localhost:9200/products/_doc/3" --insecure


# {"_index":"products","_id":"3","_version":1,"_seq_no":0,"_primary_term":1,"found":true,"_source":{"seller":{"id":1,"name":null},"category":{"id":26,"name":"Shoes"},"options":[{"category_option":{"id":90,"name":"Type"},"value":"Boots","name":"Type"},{"category_option":{"id":272,"name":"Brand"},"value":"Pantene","name":"Brand"},{"category_option":{"id":273,"name":"Hair Type"},"value":"Straight","name":"Hair Type"},{"category_option":{"id":274,"name":"Benefits"},"value":"Strengthening","name":"Benefits"},{"category_option":{"id":87,"name":"Size"},"value":"5","name":"Size"},{"category_option":{"id":88,"name":"Color"},"value":"White","name":"Color"},{"category_option":{"id":89,"name":"Material"},"value":"Leather","name":"Material"},{"category_option":{},"value":"Asd","name":"Second feautr"},{"category_option":{},"value":"Aa","name":"Hh"}],"variation_categories":[{"id":3,"name":"First variation","variations":[{"id":5,"name":"Red"},{"id":6,"name":"Yellow"},{"id":7,"name":"Black"}]},{"id":4,"name":"Second","variations":[{"id":8,"name":"One"},{"id":9,"name":"Two"}]}],"category_name":null,"parent_category_name":null,"child_categories_names":null,"id":3,"name":"First product","description":"uhouhouh"}}batyr@batyr-Lenovo-G510:~/projects/yuusell/backend$ 

customColorPalette = [
        {
            'color': 'hsl(4, 90%, 58%)',
            'label': 'Red'
        },
        {
            'color': 'hsl(340, 82%, 52%)',
            'label': 'Pink'
        },
        {
            'color': 'hsl(291, 64%, 42%)',
            'label': 'Purple'
        },
        {
            'color': 'hsl(262, 52%, 47%)',
            'label': 'Deep Purple'
        },
        {
            'color': 'hsl(231, 48%, 48%)',
            'label': 'Indigo'
        },
        {
            'color': 'hsl(207, 90%, 54%)',
            'label': 'Blue'
        },
    ]
CKEDITOR_5_FILE_STORAGE = "administration.ckeditor.CustomStorage" # optional
CKEDITOR_5_CONFIGS = {
    'default': {
        'toolbar': ['heading', '|', 'bold', 'italic', 'link',
                    'bulletedList', 'numberedList', 'blockQuote', 'imageUpload', ],

    },
    'extends': {
        'blockToolbar': [
            'paragraph', 'heading1', 'heading2', 'heading3',
            '|',
            'bulletedList', 'numberedList',
            '|',
            'blockQuote',
        ],
        'toolbar': ['heading', '|', 'outdent', 'indent', '|', 'bold', 'italic', 'link', 'underline', 'strikethrough',
        'code','subscript', 'superscript', 'highlight', '|', 'codeBlock', 'sourceEditing', 'insertImage',
                    'bulletedList', 'numberedList', 'todoList', '|',  'blockQuote', 'imageUpload', '|',
                    'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor', 'mediaEmbed', 'removeFormat',
                    'insertTable',],
        'image': {
            'toolbar': ['imageTextAlternative', '|', 'imageStyle:alignLeft',
                        'imageStyle:alignRight', 'imageStyle:alignCenter', 'imageStyle:side',  '|'],
            'styles': [
                'full',
                'side',
                'alignLeft',
                'alignRight',
                'alignCenter',
            ]

        },
        'table': {
            'contentToolbar': [ 'tableColumn', 'tableRow', 'mergeTableCells',
            'tableProperties', 'tableCellProperties' ],
            'tableProperties': {
                'borderColors': customColorPalette,
                'backgroundColors': customColorPalette
            },
            'tableCellProperties': {
                'borderColors': customColorPalette,
                'backgroundColors': customColorPalette
            }
        },
        'heading' : {
            'options': [
                { 'model': 'paragraph', 'title': 'Paragraph', 'class': 'ck-heading_paragraph' },
                { 'model': 'heading1', 'view': 'h1', 'title': 'Heading 1', 'class': 'ck-heading_heading1' },
                { 'model': 'heading2', 'view': 'h2', 'title': 'Heading 2', 'class': 'ck-heading_heading2' },
                { 'model': 'heading3', 'view': 'h3', 'title': 'Heading 3', 'class': 'ck-heading_heading3' }
            ]
        }
    },
    'list': {
        'properties': {
            'styles': 'true',
            'startIndex': 'true',
            'reversed': 'true',
        }
    }
}

LOCALE_PATHS = [BASE_DIR / 'locale'] # here
LANGUAGES = [
    ('en', "English"),
    ('ru', "Russian"),
    ('tk', "Turkmen"),
]
LANGUAGE_CODE = 'en-us' 


CASE_MESSAGE_ADMINS = ['yuusell.wa@gmail.com']
PICKUP_MESSAGE_ADMINS = ['yuusell.wa@gmail.com']
ADMIN_EMAILS = getenv(
    "ADMIN_EMAILS", 
    "cookgoc@gmail.com"
).split(",")
# chary091277@gmail.com

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'file': {
#             'level': 'DEBUG',
#             'class': 'logging.FileHandler',
#             'filename': '/root/backend/logs/django-debug.log',
#         },
#         'error_file': {
#             'level': 'ERROR',
#             'class': 'logging.FileHandler',
#             'filename': '/root/backend/logs/django-error.log',
#         },
#         'console': {
#             'level': 'DEBUG',
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['file', 'error_file', 'console'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#     },
# }
